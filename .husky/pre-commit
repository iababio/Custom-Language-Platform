#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Terminal colors
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Standard pre-commit stages
echo "${YELLOW}üîç Running pre-commit checks...${NC}"

# Stage 1: Format and lint code (fast checks)
echo "${YELLOW}Stage 1/2: Running linters and formatters...${NC}"
pnpm exec lint-staged

# Store the lint-staged exit status
LINT_STATUS=$?
if [ $LINT_STATUS -ne 0 ]; then
  echo "${RED}‚ùå Linting failed! Please fix the issues before committing.${NC}"
  exit 1
else
  echo "${GREEN}‚úì Linting passed${NC}"
fi

# Stage 2: Run Jest tests only on changed files
echo "${YELLOW}Stage 2/2: Running tests for changed files...${NC}"
CHANGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.(js|jsx|ts|tsx)$' || true)

if [ -n "$CHANGED_FILES" ]; then
  # Only run tests if there are JavaScript/TypeScript files changed
  # Use --findRelatedTests to only run tests affected by changed files
  # Add --passWithNoTests to prevent failure when no tests match
  echo "$CHANGED_FILES" | xargs pnpm test --passWithNoTests --findRelatedTests
  
  # Store the test exit status
  TEST_STATUS=$?
  
  if [ $TEST_STATUS -ne 0 ]; then
    echo "${RED}‚ùå Tests failed! Please fix the failing tests before committing.${NC}"
    exit 1
  else
    echo "${GREEN}‚úì Tests passed${NC}"
  fi
else
  echo "${GREEN}‚úì No JavaScript/TypeScript files changed, skipping tests${NC}"
fi

# All checks passed
echo "${GREEN}‚úÖ All pre-commit checks passed! Proceeding with commit.${NC}"